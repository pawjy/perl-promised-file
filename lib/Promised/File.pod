=head1 NAME

Promised::File - File system operations

=head1 SYNOPSIS

  use Promised::File;
  $file = Promised::File->new_from_path ('path/to/file.txt');
  $file->read_byte_string->then (sub { warn $_[0] });
  $file->read_char_string->then (sub { warn $_[0] });
  $p = $file->write_byte_string ($bytes);
  $p = $file->write_char_string ($chars);

=head1 DESCRIPTION

The C<Promised::File> class provides file system operations returning
L<Promise> objects.

=head1 METHOD

Following methods are available:

=over 4

=item $file = Promised::File->new_from_path ($string)

Create a C<Promised::File> object with the specified path.

The path must be a Unix style character string of the relative or
absolute path to the file.  A relative path is resolved against the
current working directory.  (However, it does not support resolving of
C<~> syntax (home directory).  It is recommended that an absolute path
be specified as the argument.)

Paths in non-unix platforms such as Windows are not supported.  Paths
in character encoding other than UTF-8 (or binary data) are not
supported.

=item $file->stat->then (sub { $stat = shift })

Return a L<Promise>, which is resolved with the C<stat> L<File::stat>
object for the file.  See C<perldoc -f stat> and L<File::stat> for
details.  Note that the object is cached such that the promise
returned by the method is always resolved with the same object.  If
the file is not found, the promise is rejected.

=item $file->lstat->then (sub { $stat = shift })

Return a L<Promise>, which is resolved with the C<lstat> L<File::stat>
object for the file.  See C<perldoc -f lstat> and L<File::stat> for
details.  Note that the object is cached such that the promise
returned by the method is always resolved with the same object.  If
the file is not found, the promise is rejected.

=item $file->is_file->then (sub { $boolean = shift })

=item $file->is_directory->then (sub { $boolean = shift })

=item $file->is_symlink->then (sub { $boolean = shift })

=item $file->is_executable->then (sub { $boolean = shift })

Return a L<Promise>, which is resolved with whether it is a file
(C<-f>), a directory (C<-d>), a symlink (C<-l>), or an executable file
(C<-x>), respectively.  If the file is not found, the promise is
resolved with false.

=item $file->read_byte_string->then (sub { $bytes = shift })

Return a L<Promise>, which is resolved with the content of the file as
a byte string.  If the specified file is not found, the promise is
rejected.

=item $file->read_char_string->then (sub { $chars = shift })

Return a L<Promise>, which is resolved with the content of the file
interpreted as a UTF-8 encoded byte sequence, represented as a Perl
utf8 string.  If the specified file is not found, the promise is
rejected.

=item $promise = $file->write_byte_string ($bytes)

Return a L<Promise>, which is resolved after the specified byte string
is written to the specified file.  Any existing file is overwritten.
The promise is rejected if failed.

=item $promise = $file->write_char_string ($chars)

Return a L<Promise>, which is resolved after the specified character
string is written to the specified file in UTF-8 character encoding.
Any existing file is overwritten.  The promise is rejected if failed.

=item $promise = $file->mkpath

Return a L<Promise>, which is resolved after the directory specified
by the path of the C<$file> object is created (if not yet).  It is
rejected if there is a conflicting file.

=item $promise = $file->remove_tree

Return a L<Promise>, which is resolved after the file or directory
specified by the path of the C<$file> object is removed, if any, as
well as any descendant.  It is rejected if the removal failed.

=back

=head1 DEPENDENCY

The module requires Perl 5.12 or later.

The module requires L<Promise>
<https://github.com/wakaba/perl-promise> and L<AnyEvent>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2015 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
