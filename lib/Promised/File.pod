=head1 NAME

Promised::File - File system operations

=head1 SYNOPSIS

  use Promised::File;
  $file = Promised::File->new_from_path ('path/to/file.txt');
  $file->read_byte_string->then (sub { warn $_[0] });
  $file->read_char_string->then (sub { warn $_[0] });
  $p = $file->write_byte_string ($bytes);
  $p = $file->write_char_string ($chars);

=head1 DESCRIPTION

The C<Promised::File> class provides file system operations returning
L<Promise> objects.

=head1 METHOD

Following methods are available:

=over 4

=item $file = Promised::File->new_from_path ($string)

Create a C<Promised::File> object with the specified path.

The path must be a Unix style character string of the relative or
absolute path to the file.  A relative path is resolved against the
current working directory.  (However, it does not support resolving of
C<~> syntax (home directory).  It is recommended that an absolute path
be specified as the argument.)

Paths in non-unix platforms such as Windows are not supported.  Paths
in character encoding other than UTF-8 (or binary data) are not
supported.

=item $file = Promised::File->new_from_raw_path ($byte_string)

Smilar to C<new_from_path>, but the argument is interpreted as a byte
string.

Don't use this method unless you know how non UTF-8 byte string is
handled by the platform.

=item $file = Promised::File->new_temp_directory (no_cleanup => BOOLEAN)

Cerate a C<Promised::File> object representing a new temporary
directory created by L<File::Temp>.

By default, the directory is removed after any reference to the file
object is discarded.  If a named parameter whose name is C<no_cleanup>
is set to a boolean true value, the directory is not removed.

=item $string = $file->path_string

Return a string that represents the path to the file.  It might or
might not be equal to the path given upon the creation of the file
object.  It might or might not be absolute.

=item $file->stat->then (sub { $stat = shift })

Return a L<Promise>, which is resolved with the C<stat> L<File::stat>
object for the file.  See C<perldoc -f stat> and L<File::stat> for
details.  Note that the object is cached such that the promise
returned by the method is always resolved with the same object.  If
the file is not found, the promise is rejected.

=item $file->lstat->then (sub { $stat = shift })

Return a L<Promise>, which is resolved with the C<lstat> L<File::stat>
object for the file.  See C<perldoc -f lstat> and L<File::stat> for
details.  Note that the object is cached such that the promise
returned by the method is always resolved with the same object.  If
the file is not found, the promise is rejected.

=item $file->is_file->then (sub { $boolean = shift })

=item $file->is_directory->then (sub { $boolean = shift })

=item $file->is_symlink->then (sub { $boolean = shift })

=item $file->is_executable->then (sub { $boolean = shift })

Return a L<Promise>, which is resolved with whether it is a file
(C<-f>), a directory (C<-d>), a symlink (C<-l>), or an executable file
(C<-x>), respectively.  If the file is not found, the promise is
resolved with false.

=item $stream = $file->read_bytes

Return a L<ReadableStream> that is a readable byte stream of the
content of the file.  If the specified file is not found, the stream
is in error.

=item $file->read_byte_string->then (sub { $bytes = shift })

Return a L<Promise>, which is resolved with the content of the file as
a byte string.  If the specified file is not found, the promise is
rejected.

=item $file->read_char_string->then (sub { $chars = shift })

Return a L<Promise>, which is resolved with the content of the file
interpreted as a UTF-8 encoded byte sequence, represented as a Perl
utf8 string.  If the specified file is not found, the promise is
rejected.

=item $stream = $file->write_bytes

Return a L<WritableStream> that is a writable stream written into the
specified file.  Any existing file is overwritten.  The stream is in
error if failed.

Any data written to the stream (i.e. the argument to the writer's
C<write> method) must be an L<ArrayBufferView> (such as L<DataView>
and L<TypedArray::Uint8Array>).

Aborting the stream (i.e. the C<abort> method) closes the file,
without completing the outstanding writes, and in fact the pending
creation of the file, depending on when the stream is aborted.
Therefore, the stream should not be aborted unless the application
(and the user) no longer have any interest to the file's content at
all.

=item $promise = $file->write_byte_string ($bytes)

Return a L<Promise>, which is resolved after the specified byte string
is written to the specified file.  Any existing file is overwritten.
The promise is rejected if failed.

=item $promise = $file->write_char_string ($chars)

Return a L<Promise>, which is resolved after the specified character
string is written to the specified file in UTF-8 character encoding.
Any existing file is overwritten.  The promise is rejected if failed.

=item $file->mkpath->then (...)

Create a directory at C<$file>'s path (if not yet).  Ancestor
directories are also created, if necessary.  Any conflicting file will
result in an error.

=item $file->mkpath_parent->then (...)

Create a directory that is the parent of C<$file>'s path (if not yet).
Ancestor directories are also created, if necessary.  Any conflicting
file will result in an error.

=item $file->remove_tree->then (...)

Return a L<Promise>, which is resolved after the file or directory
specified by the path of the C<$file> object is removed, if any, as
well as any descendant.  It is rejected if the removal failed.

=item $file->get_child_names->then (sub { $names = $_[0] })

Return a L<Promise>, which is resolved with an array reference of the
file names in the directory specified by the path of the C<$file>
object.  The array items are the names of the files and directories
directly beglonging to the directory, without directory paths, as byte
strings.  Special directories C<.> and C<..> are I<not> included in
the array.  It is rejected if there is no such directory or it is not
a directory.

=item $file->lock_new_file (signal => $signal, timeout => $seconds)->then (...)

Exclusively lock the file, using flock (i.e. advisory locking).  If
the file is not found, a new file is created before locking.

The method returns a promise, which is resolved when a lock is
acquired (or rejected with an error when failed).

The following options can be specified as named arguments:

=over 4

=item signal => $signal (required)

An L<AbortSignal> object.  If it is aborted before the lock is
acquired, the locking is canceled and the returned promised is
rejected with an C<AbortError>.  If it is aborted after the lock is
acquired, the lock is released.

This option is required.  The lock must be released.

=item timeout => $seconds

The duration the method's attempt to acquire a lock is continued, in
seconds.  If not specified, no timeout is enforced.  If timeouted, the
returned promise is rejected.

=item interval => $seconds

The duration between the method's repeated attempts to acquire a lock,
in seconds.

=back

=item $file->hardlink_from ($string, replace => BOOLEAN)->then (...)

Create a hardlink.  The first arugment is a path to the linked file.
A new file is created at C<$file>'s path and is associated to the
existing file <$string>'s content.

The following options can be specified as named arguments:

=over 4

=item replace => BOOLEAN

If true, any existing file at C<$file>'s path is removed before the
creation of new hardlink.  Otherwise, any existing file will result in
an error.

=back

=back

=head1 DEPENDENCY

The module requires Perl 5.12 or later.

The module requires L<Promise>
<https://github.com/wakaba/perl-promise> and L<AnyEvent>.

Methods C<read_bytes> and C<write_bytes> requires the
L<ReadableStream> and L<WritableStream> modules from the perl-streams
package <https://github.com/manakai/perl-streams>.  Methods
C<get_child_names> and C<lock_new_file> require L<Streams::IOError>
from the perl-streams package.

If the L<Web::Encoding> module (from the perl-web-encodings package
<https://github.com/manakai/perl-web-encodings>) is available, that
module is used to encode or decode UTF-8 texts in a way compatible
with the Web.  Otherwise, the Perl's L<Encode> module is used instead.

Method C<lock_new_file> requires L<AnyEvent::FileLock>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 HISTORY

This repository was located at
<https://github.com/wakaba/perl-promised-file> until 18 April 2023,
then transferred to <https://github.com/pawjy/perl-promised-file>.

=head1 LICENSE

Copyright 2015-2024 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
